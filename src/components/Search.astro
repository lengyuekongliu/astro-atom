---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro

import "@pagefind/default-ui/css/ui.css";
import { Icon } from "astro-icon/components";
---

<site-search class="ms-auto" id="search">
	<button
		class="flex h-8 w-8 items-center justify-center rounded-lg drop-shadow-[0px_1.5px_1.5px_rgba(0,0,0,0.175)] hover:text-accent-two cursor-pointer"
		data-open-modal
		disabled
	>
		<Icon
			aria-hidden="true"
			class="h-6 w-6"
			focusable="false"
			name="material-symbols:search-rounded"
		/>
	</button>

	<dialog
		aria-label="search"
		class="h-full max-h-full w-full max-w-full md:h-fit bg-bgColor backdrop:backdrop-blur-xl md:my-8 md:min-h-[6.5rem] 'md:w-5/6' md:max-w-[44rem] md:rounded-lg overflow-y-hidden"
	>
		<div
			class="dialog-frame flex flex-col h-[100%] px-4 pt-4 pb-4 md:px-8 md:py-8 gap-4"
		>
			<div
				class="md:hidden sticky top-0 z-20 flex items-center justify-between bg-bgColor"
			>
				<h4 class="title flex items-end font-semibold">Search</h4>
				<button
					class="flex size-8 cursor-pointer items-center justify-center rounded-lg bg-color-100 text-textColor hover:text-accent-base hover:bg-accent-base/5"
					data-close-modal
				>
					<Icon
						aria-hidden="true"
						class="h-6 w-6"
						focusable="false"
						name="material-symbols:search-rounded"
					/>
				</button>
			</div>

			{
				import.meta.env.DEV ? (
					<div class="mx-auto text-center text-textColor">
						<p>
							Search is only available in production builds.{" "}
							<br />
							Try building and previewing the site to test it out
							locally.
						</p>
					</div>
				) : (
					<div class="search-container h-full">
						<div id="citrus__search" />
					</div>
				)
			}
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		private closeBtn: HTMLButtonElement;
		private dialog: HTMLDialogElement;
		private dialogFrame: HTMLDivElement;
		private openBtn: HTMLButtonElement;

		closeModal = () => {
			if (this.dialog.open) {
				this.dialog.close();
				document.body.classList.remove("overflow-hidden");
				window.removeEventListener("click", this.onWindowClick);
			}
		};

		onWindowClick = (event: MouseEvent) => {
			// Check if it's a link
			const isLink = "href" in (event.target || {});
			// Make sure the click is either a link or outside of the dialog
			if (
				isLink ||
				(document.body.contains(event.target as Node) &&
					!this.dialogFrame.contains(event.target as Node))
			)
				this.closeModal();
		};

		onWindowKeydown = (e: KeyboardEvent) => {
			// Check if it's the / key
			if (e.key === "/" && !this.dialog.open) {
				this.openModal();
				e.preventDefault();
			}
		};

		openModal = (event?: MouseEvent) => {
			this.dialog.showModal();
			document.body.classList.add("overflow-hidden");
			this.querySelector("input")?.focus();
			event?.stopPropagation();
			window.addEventListener("click", this.onWindowClick);
		};

		constructor() {
			super();
			this.openBtn = this.querySelector<HTMLButtonElement>(
				"button[data-open-modal]",
			)!;
			this.closeBtn = this.querySelector<HTMLButtonElement>(
				"button[data-close-modal]",
			)!;
			this.dialog = this.querySelector("dialog")!;
			this.dialogFrame = this.querySelector(".dialog-frame")!;

			this.openBtn.addEventListener("click", this.openModal);
			this.openBtn.disabled = false;
			this.closeBtn.addEventListener("click", this.closeModal);
		}

		connectedCallback() {
			// Listen for keyboard shortcut
			window.addEventListener("keydown", this.onWindowKeydown);

			// Only add pagefind in production
			if (import.meta.env.DEV) return;
			const onIdle =
				window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
			onIdle(async () => {
				const { PagefindUI } = await import("@pagefind/default-ui");
				new PagefindUI({
					baseUrl: import.meta.env.BASE_URL,
					bundlePath:
						import.meta.env.BASE_URL.replace(/\/$/, "") +
						"/pagefind/",
					element: "#citrus__search",
					showImages: false,
					showSubResults: true,
				});
			});
		}

		disconnectedCallback() {
			window.removeEventListener("keydown", this.onWindowKeydown);
		}
	}

	customElements.define("site-search", SiteSearch);
</script>